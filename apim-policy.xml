<policies>
    <inbound>
        <base />
        <!-- Getting the main variable where we keep the list of backends -->
        <cache-lookup-value key="listBackends" variable-name="listBackends" />
        <!-- If we can't find the variable, initialize it -->
        <choose>
            <when condition="@(context.Variables.ContainsKey("listBackends") == false)">
                <set-variable name="listBackends" value="@{
                    // -------------------------------------------------
                    // ------- Explanation of backend properties -------
                    // -------------------------------------------------
                    // "url":               Your backend url
                    // "priority":          Lower value means higher priority over other backends. 
                    //                      If you have more one or more Priority 1 backends, they will always be used instead
                    //                      of Priority 2 or higher. Higher values backends will only be used if your lower values (top priority) are all throttling.
                    // "isThrottling":      Indicates if this endpoint is returning 429 (Too many requests) currently
                    // "retryAfter":        We use it to know when to mark this endpoint as healthy again after we received a 429 response
                    // "maxResponseTime":   We use it as a threshold for a desired response time
                    // "deploymentNames":   A comma-separated list of the deployment names

                    JArray backends = new JArray();
                    backends.Add(new JObject()
                    {
                        { "url", "https://sprockets-backend100.openai.azure.com/" },
                        { "priority", 1},
                        { "isThrottling", false }, 
                        { "retryAfter", DateTime.MinValue },
                        { "maxResponseTime", 1200000 },
                        { "deploymentNames", "gpt-4, gpt-35-turbo, text-embedding-ada-002"}
                    });

                    backends.Add(new JObject()
                    {
                        { "url", "https://sprockets-backend200.openai.azure.com/" },
                        { "priority", 2},
                        { "isThrottling", false },
                        { "retryAfter", DateTime.MinValue },
                        { "maxResponseTime", 1200000 },
                        { "deploymentNames", "gpt-4, gpt-35-turbo, text-embedding-ada-002, gpt-35-turbo-16k, gpt-4-32k"}                 
                    });

                    return backends;   
                }" />
                <!-- And store the variable into cache again -->
                <cache-store-value key="listBackends" value="@((JArray)context.Variables["listBackends"])" duration="60" />
            </when>
        </choose>
        <authentication-managed-identity resource="https://cognitiveservices.azure.com" output-token-variable-name="msi-access-token" ignore-error="false" />
        <set-header name="Authorization" exists-action="override">
            <value>@("Bearer " + (string)context.Variables["msi-access-token"])</value>
        </set-header>
        <set-variable name="backendIndex" value="-1" />
        <set-variable name="remainingBackends" value="1" />
        <set-variable name="startTime" value="@(DateTime.UtcNow)" />
        <set-variable name="deployment-id" value="@((string)context.Request.MatchedParameters["deployment-id"])" />
    </inbound>
    <backend>
        <retry condition="@(context.Response != null && (context.Response.StatusCode == 429 || context.Response.StatusCode >= 500) && ((Int32)context.Variables["remainingBackends"]) > 0)" count="2" interval="0">
            <!-- Before picking the backend, let's verify if there is any that should be set to not throttling anymore -->
            <set-variable name="listBackends" value="@{
                JArray backends = (JArray)context.Variables["listBackends"];

                for (int i = 0; i < backends.Count; i++)
                {
                    JObject backend = (JObject)backends[i];

                    if (backend.Value<bool>("isThrottling") && DateTime.Now >= backend.Value<DateTime>("retryAfter"))
                    {
                        backend["isThrottling"] = false;
                        backend["retryAfter"] = DateTime.MinValue;
                    }
                }

                return backends; 
            }" />
            <!-- Update cache with the list of backends after checking for throttling updates -->
            <cache-store-value key="listBackends" value="@((JArray)context.Variables["listBackends"])" duration="60" />
            <!-- Determine which backend to use -->
            <cache-lookup-value key="listBackends" variable-name="listBackends" />
            <set-variable name="backendIndex" value="@{                
                JArray backends = (JArray)context.Variables["listBackends"];
                string deploymentId = (string)context.Variables["deployment-id"];                   
                int selectedPriority = Int32.MaxValue;
                List<int> availableBackends = new List<int>();
                int throttledBackend = -1;                         

                for (int i = 0; i < backends.Count; i++)
                {
                    JObject backend = (JObject)backends[i];
                    
                    // Retrieve the list of deployed models for the selected backend
                    string[] deploymentNames = backend.Value<string>("deploymentNames").Split(',').Select(s => s.Trim()).ToArray();
                    
                    // Make sure the model is deployed in the backend and isn't throttled
                    if (Array.Exists(deploymentNames, element => element == deploymentId))                    
                    {                        
                        if (!backend.Value<bool>("isThrottling"))
                        {
                            int backendPriority = backend.Value<int>("priority");
                            if (backendPriority < selectedPriority)
                            {
                                selectedPriority = backendPriority;
                                availableBackends.Clear();
                                availableBackends.Add(i);
                            } 
                            else if (backendPriority == selectedPriority)
                            {
                                availableBackends.Add(i);
                            }                            
                        }
                        else 
                        {
                           // Save the index of the throttled backend in case there aren't any 
                           // others available.
                           throttledBackend = i;
                        }
                    }
                }

                if (availableBackends.Count == 1)
                {
                    return availableBackends[0];
                }
            
                if (availableBackends.Count > 0)
                {
                    // Returns a random backend from the list if we have more than one available with the same priority
                    return availableBackends[new Random().Next(0, availableBackends.Count)];
                }
                else
                { 
                    // Return the throttled backend as the last resort
                    return throttledBackend; 
                }                
            }" />
            <!-- Check to see if the backend index has been set and return a 404 if it hasn't -->
            <choose>
                <when condition="@(context.Variables.GetValueOrDefault<int>("backendIndex", -1) == -1)">
                    <return-response>
                        <set-status code="404" reason="DeploymentNotFound" />
                        <set-body>@("No backends available for deployment " + (string)context.Variables["deployment-id"])</set-body>
                    </return-response>
                </when>
            </choose>
            <set-variable name="backendUrl" value="@(((JObject)((JArray)context.Variables["listBackends"])[(Int32)context.Variables["backendIndex"]]).Value<string>("url") + "/openai")" />
            <set-variable name="selectedBackend" value="@(((JObject)((JArray)context.Variables["listBackends"])[(Int32)context.Variables["backendIndex"]]))" />
            <set-backend-service base-url="@((string)context.Variables["backendUrl"])" />            
            <forward-request buffer-request-body="true" />
            <choose>
                <!-- In case we got 429 or 5xx from a backend, update the list with its status -->
                <when condition="@(context.Response != null && (context.Response.StatusCode == 429 || context.Response.StatusCode >= 500) )">           
                    <cache-lookup-value key="listBackends" variable-name="listBackends" />
                    <set-variable name="listBackends" value="@{
                        JArray backends = (JArray)context.Variables["listBackends"];
                        int currentBackendIndex = context.Variables.GetValueOrDefault<int>("backendIndex");
                        int retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("Retry-After", "-1"));

                        if (retryAfter == -1)
                        {
                            retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("x-ratelimit-reset-requests", "-1"));
                        }

                        if (retryAfter == -1)
                        {
                            retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("x-ratelimit-reset-tokens", "10"));
                        }

                        JObject backend = (JObject)backends[currentBackendIndex];
                        backend["isThrottling"] = true;
                        backend["retryAfter"] = DateTime.Now.AddSeconds(retryAfter);

                        return backends;      
                    }" />
                    <cache-store-value key="listBackends" value="@((JArray)context.Variables["listBackends"])" duration="60" />
                    <set-variable name="remainingBackends" value="@{
                        JArray backends = (JArray)context.Variables["listBackends"];
                        string deploymentId = (string)context.Variables["deployment-id"];

                        int remainingBackends = 0;

                        for (int i = 0; i < backends.Count; i++)
                        {
                            JObject backend = (JObject)backends[i];

                            if (!backend.Value<bool>("isThrottling"))
                            {
                                string[] deploymentNames = backend.Value<string>("deploymentNames").Split(',').Select(s => s.Trim()).ToArray();
                                if (Array.Exists(deploymentNames, element => element == deploymentId))
                                {                                
                                    remainingBackends++;
                                }
                            }
                        }

                        return remainingBackends;
                    }" />
                </when>
                <!--
                    If the request is successful, check the time and compare it against
                    the max response value. 
                -->
                <when condition="@(context.Response.StatusCode == 200 || context.Response.StatusCode == 400)">
                    <set-variable name="responseTime" value="@((DateTime.UtcNow - (DateTime)context.Variables["startTime"]).TotalMilliseconds)" />
                    <set-variable name="slowResponse" value="@{
                        bool slow = false;
                        JObject selectedBackend = (JObject)context.Variables["selectedBackend"];                        
                        bool maxResponseTimeSet = selectedBackend.Property("maxResponseTime") != null;
                        if (maxResponseTimeSet)
                        {
                            Double responseTime = (Double)context.Variables["responseTime"];
                            Double maxResponseTime = selectedBackend.Value<Double>("maxResponseTime");
                            slow = responseTime > maxResponseTime;
                        }                        
                        return slow;
                    }" />
                    <choose>
                        <!--
                            Update the backend to reflect if the max response time 
                            has been exceeded.
                        -->
                        <when condition="@((bool)context.Variables["slowResponse"] == true)">
                            <cache-lookup-value key="listBackends" variable-name="listBackends" />
                            <set-variable name="listBackends" value="@{
                                JArray backends = (JArray)context.Variables["listBackends"];
                                int currentBackendIndex = context.Variables.GetValueOrDefault<int>("backendIndex");
                                JObject backend = (JObject)backends[currentBackendIndex];
                                backends[currentBackendIndex]["isThrottling"] = true;
                                backends[currentBackendIndex]["retryAfter"] = DateTime.Now.AddSeconds(60);
                                return backends; 
                            }" />
                            <cache-store-value key="listBackends" value="@((JArray)context.Variables["listBackends"])" duration="60" />
                        </when>
                    </choose>
                </when>
            </choose>                        
        </retry>
    </backend>
    <outbound>
        <base />      
        <set-header name="x-response-time-ms" exists-action="override">
            <value>@{
                var mms = (Double)context.Variables["responseTime"];
                return mms.ToString();
            }</value>
        </set-header>
        <choose>
            <when condition="@(context.Variables.ContainsKey("slowResponse"))">
                <set-header name="x-response-time-exceeded" exists-action="override">
                    <value>@{        
                        bool slow = false;     
                        if (context.Variables.ContainsKey("slowResponse"))
                        {
                            slow = (bool)context.Variables["slowResponse"];                       
                        }
                        return slow.ToString();
                    }</value>
                </set-header>
            </when>
        </choose>
        <set-header name="x-openai-backendurl" exists-action="override">
            <value>@(context.Variables.GetValueOrDefault<string>("backendUrl", "none"))</value>
        </set-header>
    </outbound>
    <on-error>
        <base />
        <choose>
            <when condition="@(context.Response != null && context.Response.StatusCode >= 500)">
                <cache-lookup-value key="listBackends" variable-name="listBackends" />
                <set-variable name="listBackends" value="@{
                    JArray backends = (JArray)context.Variables["listBackends"];
                    int currentBackendIndex = context.Variables.GetValueOrDefault<int>("backendIndex");
                    int retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("Retry-After", "-1"));

                    if (retryAfter == -1)
                    {
                        retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("x-ratelimit-reset-requests", "-1"));
                    }

                    if (retryAfter == -1)
                    {
                        retryAfter = Convert.ToInt32(context.Response.Headers.GetValueOrDefault("x-ratelimit-reset-tokens", "10"));
                    }

                    JObject backend = (JObject)backends[currentBackendIndex];
                    backend["isThrottling"] = true;
                    backend["retryAfter"] = DateTime.Now.AddSeconds(retryAfter);

                    return backends;      
                }" />
                <cache-store-value key="listBackends" value="@((JArray)context.Variables["listBackends"])" duration="60" />              
                <return-response>
                    <set-status code="500" reason="Internal Server Error" />
                    <set-body>Sorry, the service is currently unavailable. Please try again later.</set-body>
                </return-response>
            </when>
        </choose>            
    </on-error>
</policies>